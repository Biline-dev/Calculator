
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.HashMap;
import java.util.ArrayList;
import calculatrice.Calculatrice;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\005\000\002\002\004\000\002\002" +
    "\002\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\002\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\004\005\000\002\014\002" +
    "\000\002\005\006\000\002\005\003\000\002\011\005\000" +
    "\002\010\005\000\002\010\007\000\002\010\005\000\002" +
    "\010\007\000\002\015\002\000\002\010\006\000\002\010" +
    "\003\000\002\010\003\000\002\012\006\000\002\012\006" +
    "\000\002\006\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\024\002\uffff\003\016\006\004\010\ufff8\011" +
    "\011\012\005\013\012\017\017\020\013\001\002\000\016" +
    "\003\016\006\004\011\011\012\027\013\035\020\013\001" +
    "\002\000\012\004\ufff3\005\ufff3\010\ufff3\015\107\001\002" +
    "\000\004\010\ufffc\001\002\000\016\004\ufff2\005\ufff2\007" +
    "\ufff2\010\ufff2\011\ufff2\014\ufff2\001\002\000\004\010\105" +
    "\001\002\000\016\003\016\006\004\011\011\012\027\013" +
    "\035\020\013\001\002\000\016\004\047\005\050\010\uffe4" +
    "\011\044\015\075\016\uffe7\001\002\000\016\004\ufff4\005" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\014\ufff4\001\002\000\010" +
    "\010\uffe5\011\034\016\061\001\002\000\010\004\025\005" +
    "\026\010\ufffd\001\002\000\016\004\ufff1\005\ufff1\007\ufff1" +
    "\010\ufff1\011\ufff1\014\ufff1\001\002\000\004\010\ufffa\001" +
    "\002\000\004\010\ufffe\001\002\000\004\010\ufffb\001\002" +
    "\000\004\010\ufff9\001\002\000\004\002\024\001\002\000" +
    "\004\002\000\001\002\000\016\003\016\006\004\011\011" +
    "\012\027\013\056\020\013\001\002\000\016\003\016\006" +
    "\004\011\011\012\027\013\030\020\013\001\002\000\016" +
    "\004\ufff3\005\ufff3\007\ufff3\010\ufff3\011\ufff3\014\ufff3\001" +
    "\002\000\012\004\047\005\050\010\uffdf\011\044\001\002" +
    "\000\004\011\034\001\002\000\010\004\ufff6\005\ufff6\010" +
    "\ufff6\001\002\000\004\010\uffdb\001\002\000\016\003\016" +
    "\006\004\011\011\012\027\013\035\020\013\001\002\000" +
    "\004\011\044\001\002\000\010\004\040\005\041\011\037" +
    "\001\002\000\016\004\uffe2\005\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\014\uffe2\001\002\000\016\003\016\006\004\011\011" +
    "\012\027\013\035\020\013\001\002\000\016\003\016\006" +
    "\004\011\011\012\027\013\035\020\013\001\002\000\016" +
    "\004\ufff6\005\ufff6\007\ufff6\010\ufff6\011\ufff6\014\ufff6\001" +
    "\002\000\016\004\ufff7\005\041\007\ufff7\010\ufff7\011\ufff7" +
    "\014\ufff7\001\002\000\016\003\016\006\004\011\011\012" +
    "\027\013\035\020\013\001\002\000\010\004\040\005\041" +
    "\011\046\001\002\000\016\004\uffe3\005\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\014\uffe3\001\002\000\016\003\016\006\004" +
    "\011\011\012\027\013\051\020\013\001\002\000\016\003" +
    "\016\006\004\011\011\012\027\013\051\020\013\001\002" +
    "\000\010\004\047\005\050\011\044\001\002\000\010\004" +
    "\025\005\026\010\uffe0\001\002\000\004\010\uffdc\001\002" +
    "\000\010\004\025\005\026\010\uffde\001\002\000\004\010" +
    "\uffda\001\002\000\012\004\047\005\050\010\uffdd\011\044" +
    "\001\002\000\010\004\ufff7\005\026\010\ufff7\001\002\000" +
    "\004\010\uffd9\001\002\000\006\011\011\013\063\001\002" +
    "\000\006\010\uffeb\016\073\001\002\000\006\010\uffe9\016" +
    "\064\001\002\000\006\011\011\013\067\001\002\000\006" +
    "\010\uffe5\016\061\001\002\000\004\010\uffe8\001\002\000" +
    "\006\010\uffe4\016\uffe7\001\002\000\004\016\071\001\002" +
    "\000\006\011\011\013\067\001\002\000\004\010\uffe6\001" +
    "\002\000\006\011\011\013\067\001\002\000\004\010\uffea" +
    "\001\002\000\006\011\011\013\067\001\002\000\004\010" +
    "\uffec\001\002\000\012\004\040\005\041\011\uffed\014\uffef" +
    "\001\002\000\004\011\101\001\002\000\010\010\ufff0\011" +
    "\ufff0\016\ufff0\001\002\000\004\014\103\001\002\000\016" +
    "\003\016\006\004\011\011\012\027\013\035\020\013\001" +
    "\002\000\004\011\uffee\001\002\000\024\002\uffff\003\016" +
    "\006\004\010\ufff8\011\011\012\005\013\012\017\017\020" +
    "\013\001\002\000\004\002\001\001\002\000\016\003\016" +
    "\006\004\011\011\012\027\013\035\020\013\001\002\000" +
    "\010\004\040\005\041\010\uffe1\001\002\000\010\004\040" +
    "\005\041\007\112\001\002\000\016\004\ufff5\005\ufff5\007" +
    "\ufff5\010\ufff5\011\ufff5\014\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\024\002\022\003\014\004\013\006\017\007" +
    "\007\010\020\011\005\012\006\013\021\001\001\000\010" +
    "\003\110\004\030\012\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\076\004\030\005\077\012\006\001\001\000\004\015" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\056\004\030\012\006\013" +
    "\057\001\001\000\012\003\031\004\030\012\006\013\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\035" +
    "\004\030\012\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\042\004\030\012\006" +
    "\001\001\000\010\003\041\004\030\012\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\044\004\030" +
    "\012\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\053\004\030\012\006\013\054\001\001\000\012" +
    "\003\051\004\030\012\006\013\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\064\010\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\067\001\001" +
    "\000\002\001\001\000\006\004\064\010\071\001\001\000" +
    "\002\001\001\000\006\004\064\010\073\001\001\000\002" +
    "\001\001\000\006\004\064\010\075\001\001\000\002\001" +
    "\001\000\004\014\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\076\004\030\005" +
    "\103\012\006\001\001\000\002\001\001\000\024\002\105" +
    "\003\014\004\013\006\017\007\007\010\020\011\005\012" +
    "\006\013\021\001\001\000\002\001\001\000\010\003\107" +
    "\004\030\012\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   public static void main(String args[]) throws Exception {
      System.out.println("Faites entrer vos instructions : ");
      System.out.println("-------------------------------- ");
      new parser(new Yylex(new InputStreamReader(System.in))).parse();
   }

   // pour avoir la lingne---------------------------------------------------------------------------
   //------------------------------------------------------------------------------------------------
    public int pline(){
	    return ((Yylex)getScanner()).getYyLine();
	}
   //-----------------------------------------------------------------------------------------------


   // pour afficher l'erreur syntaxique Ã  la bonne ligne---------------------------------------------
   //------------------------------------------------------------------------------------------------
    public void syntax_error(Symbol cur_token) {
        int line = ((Yylex)getScanner()).getYyLine();
        System.out.println("Syntax error at line " + line + ": Unexpected token " + cur_token.value);
    }
    //-----------------------------------------------------------------------------------------------



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    //------------------------------------------------------------------------------
    /*  
    -Class calculatrice utilisÃ© pour le stockage des variables et des tableaux,
    -Elle initialise la table de symbole variable et table de symbole tableau,
    -Initilisation d'un objet calculatrice pour entamer les calcules.
    */
    Calculatrice calcule = new Calculatrice();
   //-------------------------------------------------------------------------------


   //Les listes utilisÃ©e pour l'affichage temporaire sans stockage.-------
   //---------------------------------------------------------------------
   ArrayList<Integer> tableau = new ArrayList<Integer>();
   ArrayList<Integer> tableauTemp = tableau;
   //---------------------------------------------------------------------


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr ::= instruct ANTI_SLASH expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= 
            {
              Object RESULT =null;
		 System.out.println("Au revoir!"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruct ::= affect 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
                    System.out.println(calcule.toStringFromSymbolVar((String)e));
                    //rÃ©initialiser le tableau pour d'autre instructions----------//
                    tableau = new ArrayList<Integer>() ;    
                    tableauTemp = tableau;
                    System.out.println("----------------------------------------");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruct",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruct ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("----------------------------------------");
                RESULT = e;
                if (e!= null && e instanceof Integer) {
                    System.out.println("Entier " + e);
                }
                //rÃ©initialiser le tableau pour d'autre instructions----------//
                tableau = new ArrayList<Integer>() ;
                tableauTemp = tableau;
                System.out.println("----------------------------------------");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruct",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruct ::= declaration 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("----------------------------------------");
                RESULT = e; 
                System.out.println(calcule.toStringFromSymbolTab((String)e));
                //rÃ©initialiser le tableau pour d'autre instructions----------//
                tableau = new ArrayList<Integer>() ;
                tableauTemp = tableau;
                System.out.println("----------------------------------------");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruct",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruct ::= concat 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("----------------------------------------");
                RESULT = e;
                System.out.println(calcule.toStringTab(tableau));
                //rÃ©initialiser le tableau pour d'autre instructions----------//
                tableau = new ArrayList<Integer>();
                tableauTemp = tableau;
                System.out.println("----------------------------------------");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruct",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruct ::= PRINT 
            {
              Object RESULT =null;
		 
                System.out.println("Affichage : ");
                System.out.println("----------------------------------------");
                calcule.print();  
                System.out.println("----------------------------------------");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruct",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruct ::= errors 
            {
              Object RESULT =null;
		
                System.out.println("----------------------------------------");
                System.out.println("Erreur ligne: " + pline());
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruct",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruct ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruct",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression ::= expression OP_PLUS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        if(e1!=null && e2!=null){
                            RESULT = (int)e1+(int)e2;
                        }   
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= expression OP_FOIS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        if(e1!=null && e2!=null){
                            RESULT = (int)e1*(int)e2;
                        }   
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= PAR_OUV expression PAR_FERM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e ;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= ENTIER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= IDENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        if(calcule.getSymboleTable().containsKey((String)e)){
                            RESULT = calcule.getSymboleTable().get((String)e);
                        }else{
                            RESULT = null;
                            System.out.println("erreur semantique -> identificateur inconnu : "+e);
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= tab 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e; 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // initial ::= SEP decla SEP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT =e;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initial",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                RESULT = e;
                if(e!=null)
                    tableau.add((int)e);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // decla ::= expression NT$0 VIRG decla 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decla",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // decla ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = e;
                if(e!=null)
                    tableau.add((int)e);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decla",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaration ::= TABLEAU AFFECT concat 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT =(String)t1;
                        calcule.getSymboleTableTab().put(t1, tableau);            
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // concat ::= initial CONCAT initial 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // concat ::= initial CONCAT initial CONCAT concat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // concat ::= initial CONCAT TABLEAU 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // concat ::= initial CONCAT TABLEAU CONCAT concat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$1 ::= 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          
            if(calcule.getSymboleTableTab().containsKey((String)t1)){ 
               tableau.addAll(calcule.getSymboleTableTab().get((String)t1));
            }else{
                RESULT = null;
                System.out.println("erreur semantique -> identificateur inconnu : "+t1);
            }  
          
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // concat ::= TABLEAU NT$1 CONCAT concat 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // concat ::= initial 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // concat ::= TABLEAU 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          
            if(calcule.getSymboleTableTab().containsKey((String)t1)){ 
               tableau.addAll(calcule.getSymboleTableTab().get((String)t1));
            }else{
                RESULT = null;
                System.out.println("erreur semantique -> identificateur inconnu : "+t1);
            }  
          
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("concat",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tab ::= TABLEAU SEP expression SEP 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            
            //Make the condition if the variable t1 exists
            if(calcule.getSymboleTableTab().containsKey((String)t1)){ 
                if((Integer)e>=0 && (Integer)e<calcule.getSymboleTableTab().get((String)t1).size()){
                    RESULT = calcule.getSymboleTableTab().get((String)t1).get((Integer)e);
                }else{
                    RESULT = null;
                    System.out.println("AccÃ¨s Ã  un indice hors du tableau");
                }
            }else{
                RESULT = null;
                System.out.println("Erreur semantique -> identificateur inconnu : "+t1);
            }  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tab",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tab ::= initial SEP expression SEP 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                if((Integer)e-(Integer)i>=0 &&  e!=null && (Integer)e>=0 && (Integer)e<tableauTemp.size()){
                    RESULT = tableauTemp.get((Integer)e-(Integer)i);
                    tableau = new ArrayList<Integer>();
                }else{ 

                    if((Integer)e>=0 && (Integer)e<tableauTemp.size()){
                        RESULT = i;
                        tableau = new ArrayList<Integer>();
                    }else{
                        RESULT = null;
                        System.out.println("AccÃ¨s Ã  un indice hors du tableau");
                    }
                   
                } 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tab",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // affect ::= IDENT AFFECT expression 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT =id;
                        if(e!=null){
                            calcule.getSymboleTable().put(id, (Integer)e);
                        }     
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("affect",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // errors ::= TABLEAU OP_FOIS expression 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                if(calcule.getSymboleTableTab().containsKey((String)t1)){ 
                    System.out.println("erreur de type sur lâoperateur *");
                }else{
                    RESULT = null;
                    System.out.println("erreur semantique -> identificateur inconnu : "+t1);
                }  
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("errors",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // errors ::= expression OP_FOIS TABLEAU 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(calcule.getSymboleTableTab().containsKey((String)t1)){ 
                    System.out.println("erreur de type sur lâoperateur *");
                }else{
                    RESULT = null;
                    System.out.println("erreur semantique -> identificateur inconnu : "+t1);
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("errors",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // errors ::= TABLEAU OP_PLUS expression 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                if(calcule.getSymboleTableTab().containsKey((String)t1)){ 
                    System.out.println("erreur de type sur lâoperateur +");
                }else{
                    RESULT = null;
                    System.out.println("erreur semantique -> identificateur inconnu : "+t1);
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("errors",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // errors ::= expression OP_PLUS TABLEAU 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(calcule.getSymboleTableTab().containsKey((String)t1)){ 
                    System.out.println("erreur de type sur lâoperateur +");
                }else{
                    RESULT = null;
                    System.out.println("erreur semantique -> identificateur inconnu : "+t1);
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("errors",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // errors ::= TABLEAU OP_FOIS errors 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                if(calcule.getSymboleTableTab().containsKey((String)t1)){ 
                    System.out.println("erreur de type sur lâoperateur *");
                }else{
                    RESULT = null;
                    System.out.println("erreur semantique -> identificateur inconnu : "+t1);
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("errors",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // errors ::= expression OP_FOIS errors 
            {
              Object RESULT =null;
		
             System.out.println("erreur de type sur lâoperateur *");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("errors",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // errors ::= TABLEAU OP_PLUS errors 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                if(calcule.getSymboleTableTab().containsKey((String)t1)){ 
                    System.out.println("erreur de type sur lâoperateur +");
                }else{
                    RESULT = null;
                    System.out.println("erreur semantique -> identificateur inconnu : "+t1);
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("errors",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // errors ::= expression OP_PLUS errors 
            {
              Object RESULT =null;
		
             System.out.println("erreur de type sur lâoperateur +");
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("errors",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
